<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    
    xmlns:reskeys="clr-namespace:MLib.Themes"
>

    <!-- CONTEXT MENU XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->
    <Style x:Key="MetroContextMenu" TargetType="{x:Type ContextMenu}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
                <Setter Property="Height" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Separator">
                            <Border BorderBrush="{DynamicResource {x:Static reskeys:MenuKeys.MenuSeparatorBorderBrushKey}}" BorderThickness="1" Margin="25,0,0,0"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type MenuItem}">
                <Style.Resources>
                    <Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
                </Style.Resources>
                <!-- Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
                <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" / -->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:MenuKeys.TextBrushKey}}"/>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <!--Border 1 Item with Submenu underneath -->
                            <Border x:Name="Border"
                                    Background="Transparent"
                                    BorderBrush="Transparent" 
                                    BorderThickness="1"
                                    SnapsToDevicePixels="True">
                                <Grid x:Name="Grid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" 
                                                          SharedSizeGroup="MenuItemIconColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                        <ColumnDefinition x:Name="Col3" Width="*" />
                                    </Grid.ColumnDefinitions>

                                    <ContentPresenter Grid.Column="0"
                                                      x:Name="Icon"
                                                      Margin="2,0,2,0"
                                                      VerticalAlignment="Center"
                                                      ContentSource="Icon"/>

                                    <Border Margin="2,0,2,0" x:Name="GlyphPanel"
                                              Width="18" Height="18"
                                              Visibility="Collapsed"
                                              HorizontalAlignment="Center"
                                              Background="{DynamicResource {x:Static reskeys:MenuKeys.CheckMarkBackgroundBrushKey}}"
                                              BorderBrush="{DynamicResource {x:Static reskeys:MenuKeys.CheckMarkBorderBrushKey}}"
                                              BorderThickness="2" CornerRadius="0">

                                        <Path Fill="{DynamicResource {x:Static reskeys:MenuKeys.CheckMarkForegroundBrushKey}}"
                                            HorizontalAlignment="Center"
                                            FlowDirection="LeftToRight"
                                            x:Name="Glyph"
                                            Width="9"
                                            Height="11"
                                            Data="{StaticResource Checkmark}" />
                                    </Border>

                                    <ContentPresenter Grid.Column="1"
                                                      Margin="{TemplateBinding Padding}" 
                                                      x:Name="HeaderHost"
                                                      RecognizesAccessKey="True" 
                                                      ContentSource="Header"
                                                      VerticalAlignment="Center"/>

                                    <ContentPresenter Grid.Column="2"
                                                      Margin="8,1,8,1"
                                                      x:Name="IGTHost" 
                                                      ContentSource="InputGestureText"
                                                      VerticalAlignment="Center"/>

                                    <Grid Grid.Column="3" Margin="4,0,6,0"
                                          x:Name="ArrowPanel"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Stretch"
                                          >
                                        <Path x:Name="ArrowPanelPath"
                                              HorizontalAlignment="Right"
                                              VerticalAlignment="Center" 
                                              Fill="{TemplateBinding Foreground}"
                                              Data="M0,0 L0,8 L4,4 z"/>
                                    </Grid>
                                    <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                          Placement="Right" HorizontalOffset="-1" x:Name="SubMenuPopup" Focusable="false"
                                          PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                          AllowsTransparency="True">
                                        <Grid Margin="0,0,5,5">
                                            <!--Border 2-->
                                            <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource {x:Static reskeys:MenuKeys.MenuSeparatorBorderBrushKey}}"
                                                     BorderThickness="1" Background="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundKey}}" 
                                                     SnapsToDevicePixels="True"
                                                     Effect="{DynamicResource {x:Static reskeys:MenuKeys.DropShadowEffectKey}}"
                                                    >
                                                <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True" Margin="2">
                                                    <StackPanel IsItemsHost="True" 
                                                                KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                                </Grid>
                                            </Border>
                                            <!--Border 3-->
                                            <Border Margin="1,0,0,0" x:Name="TransitionBorder" Width="0" Height="2" 
                                                    VerticalAlignment="Top" HorizontalAlignment="Left" 
                                                    Background="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundKey}}"
                                                    SnapsToDevicePixels="False"
                                                    BorderThickness="1"
                                                    BorderBrush="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundKey}}"/>
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <!-- A menu entry with check mark cannot have an icon -->
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
                                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
                                </Trigger>

                                <!--<Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Padding" Value="6,0,6,2"/>
                                    <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom"/>
                                    <Setter TargetName="Col0" Property="MinWidth" Value="0"/>
                                    <Setter TargetName="Col3" Property="Width" Value="Auto"/>
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="IGTHost" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SubMenuBorder" Property="BorderThickness" Value="1,1,1,1"/>
                                    <Setter TargetName="SubMenu" Property="Margin" Value="2,3,2,2"/>
                                    <Setter TargetName="TransitionBorder" Property="Width" Value="{Binding ActualWidth, ElementName=Grid}"/>
                                </Trigger>
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Padding" Value="6,0,6,2"/>
                                    <Setter TargetName="Col0" Property="MinWidth" Value="0"/>
                                    <Setter TargetName="Col3" Property="Width" Value="Auto"/>
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="IGTHost" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                                </Trigger>-->
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="10,3,0,3"/>
                                    <Setter TargetName="Border" Property="MinHeight" Value="22"/>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundKey}}"/>
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="10,3,0,3"/>
                                    <Setter TargetName="Border" Property="MinHeight" Value="22"/>
                                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundKey}}"/>
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="True">
                                    <!-- Border Applies to item with sub-menu attached to it -->
                                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static reskeys:MenuKeys.ItemBackgroundHoverKey}}"/>
                                </Trigger>
                                <!-- MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="true"/>
                                        <Condition Property="Role" Value="TopLevelHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static reskeys:MenuKeys.MenuItemHighlightedBackgroundKey}}"/>
                                </>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="true"/>
                                        <Condition Property="Role" Value="TopLevelItem"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static reskeys:MenuKeys.MenuItemHighlightedBackgroundKey}}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="true"/>
                                        <Condition Property="Role" Value="SubmenuHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundHighlightedKey}}"/>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundHighlightedKey}}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="true"/>
                                        <Condition Property="Role" Value="SubmenuItem"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundHighlightedKey}}"/>
                                </MultiTrigger -->
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSubmenuOpen" Value="true"/>
                                        <Condition Property="Role" Value="TopLevelHeader"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static reskeys:MenuKeys.SubmenuItemBackgroundKey}}"/>
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:MenuKeys.MenuSeparatorBorderBrushKey}}"/>
                                    <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0"/>
                                </MultiTrigger>
                                <Trigger Property="IsSubmenuOpen" Value="true">
                                    <Setter TargetName="ArrowPanelPath" Property="Fill" Value="{DynamicResource {x:Static reskeys:MenuKeys.ItemBackgroundSelectedKey}}"/>
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:MenuKeys.ItemTextDisabledKey}}"/>
                                    <Setter Property="Background" TargetName="GlyphPanel" Value="{DynamicResource {x:Static reskeys:MenuKeys.DisabledSubMenuItemBackgroundBrushKey}}" />
                                    <Setter Property="BorderBrush" TargetName="GlyphPanel" Value="{DynamicResource {x:Static reskeys:MenuKeys.DisabledSubMenuItemBorderBrushKey}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
                <Setter Property="ClickMode" Value="Hover" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="MinHeight" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <DockPanel SnapsToDevicePixels="true" Background="Transparent">
                                <Rectangle Fill="Transparent" x:Name="R1" Width="1" DockPanel.Dock="Right" />
                                <Rectangle Fill="Transparent" x:Name="B1" Height="1" DockPanel.Dock="Bottom" />
                                <Rectangle Fill="Transparent" x:Name="L1" Width="1" DockPanel.Dock="Left" />
                                <Rectangle Fill="Transparent" x:Name="T1" Height="1" DockPanel.Dock="Top" />
                                <ContentPresenter HorizontalAlignment="Center" Margin="2,2,2,2" x:Name="ContentContainer" VerticalAlignment="Center" />
                            </DockPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="R1" Value="{DynamicResource {x:Static reskeys:MenuKeys.FocusScrollButtonBrushKey}}" />
                                    <Setter Property="Fill" TargetName="B1" Value="{DynamicResource {x:Static reskeys:MenuKeys.FocusScrollButtonBrushKey}}" />
                                    <Setter Property="Fill" TargetName="L1" Value="{DynamicResource {x:Static reskeys:MenuKeys.FocusScrollButtonBrushKey}}" />
                                    <Setter Property="Fill" TargetName="T1" Value="{DynamicResource {x:Static reskeys:MenuKeys.FocusScrollButtonBrushKey}}" />
                                    <Setter Property="Margin" TargetName="ContentContainer" Value="3,3,1,1" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
            <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
            <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
            <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

            <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
                <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
                <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border Grid.Row="1">
                                    <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                                </Border>
                                <RepeatButton Style="{StaticResource MenuScrollButton}"
                                              Focusable="false" Command="{x:Static ScrollBar.LineUpCommand}"
                                              CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                                    <RepeatButton.Visibility>
                                        <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0">
                                            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RepeatButton.Visibility>
                                    <Path Fill="{DynamicResource {x:Static reskeys:MenuKeys.ScrollButtonBrushKey}}"
                                          Data="{StaticResource UpArrow}" />
                                </RepeatButton>
                                <RepeatButton Style="{StaticResource MenuScrollButton}" Focusable="false" Grid.Row="2" Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                                    <RepeatButton.Visibility>
                                        <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100">
                                            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RepeatButton.Visibility>
                                    <Path Fill="{DynamicResource {x:Static reskeys:MenuKeys.ScrollButtonBrushKey}}"
                                          Data="{StaticResource DownArrow}" />
                                </RepeatButton>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style the area of each sub-menu in which items are placed -->
            <ControlTemplate x:Key="{ComponentResourceKey ResourceId=ContextmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}" TargetType="{x:Type ContentControl}">
                <Border Background="{DynamicResource {x:Static reskeys:MenuKeys.MenuBackgroundKey}}"
                        BorderBrush="{DynamicResource {x:Static reskeys:MenuKeys.MenuBorderBrushKey}}"
                        BorderThickness="1"
                        CornerRadius="0,0,6,0">
                    <Grid>
                        <ContentPresenter Margin="1,0" Grid.ColumnSpan="2" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Style.Resources>

        <!-- Setter Property="Background" Value="{DynamicResource MenuBackgroundBrush}"/ -->
        <!-- Setter Property="BorderThickness" Value="1"/ -->
        <!-- Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrush}"/ -->
        <Setter Property="HasDropShadow" Value="True" />

        <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:MenuKeys.TextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <!-- Style ContextMenu such that Drop shadow is visible through Grid with Margin 0,0,3,3 -->
                    <Grid x:Name="SubMenu" Margin="0,0,3,3" SnapsToDevicePixels="true">
                        <!-- Implement drop shadow through border with bitmap effect -->
                        <Border x:Name="Shdw"
                                Background="{DynamicResource {x:Static reskeys:MenuKeys.MenuBackgroundKey}}"
                                CornerRadius="0,0,6,0"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                Effect="{DynamicResource {x:Static reskeys:MenuKeys.DropShadowEffectKey}}">
                            <Grid Margin="0">
                                <ContentControl x:Name="SubMenuBorder"
                                                IsTabStop="false"
                                                Template="{DynamicResource {ComponentResourceKey ResourceId=ContextmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}"
                                                  CanContentScroll="true">
                                        <Grid>
                                            <!-- Display nice icon column enhancement (even if there is no icon to be displayed) -->
                                            <!--Border Margin="0,0,0,0"
                                                    Width="36"
                                                    Background="{StaticResource MenuDecorationBarGradient}"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Stretch" /-->
                                            <ItemsPresenter Margin="2"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                            Grid.IsSharedSizeScope="true"
                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                            KeyboardNavigation.TabNavigation="Cycle" />
                                        </Grid>
                                    </ScrollViewer>
                                </ContentControl>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource MetroContextMenu}" />

    <!-- This style should be assigned on a standard control style (TextBox, RichTextBox etc...)
         in order to style the standard Context menu accordingly:
    
        <Style TargetType="{x:Type TextBox}">
          ...
          <Setter Property="ContextMenu" Value="{DynamicResource TextBoxMetroContextMenu}" />
          ...
        </Style>
    -->
    <ContextMenu x:Key="TextBoxMetroContextMenu" Style="{StaticResource MetroContextMenu}">
        <MenuItem Command="ApplicationCommands.Cut" />
        <MenuItem Command="ApplicationCommands.Copy" />
        <MenuItem Command="ApplicationCommands.Paste" />
        <Separator/>
        <MenuItem Command="ApplicationCommands.SelectAll" />
        <Separator/>
        <MenuItem Command="ApplicationCommands.Undo" />
        <MenuItem Command="ApplicationCommands.Redo" />
    </ContextMenu>

</ResourceDictionary>